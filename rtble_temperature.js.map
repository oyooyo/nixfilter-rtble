{
  "version": 3,
  "file": "rtble_temperature.js",
  "sourceRoot": "",
  "sources": [
    "rtble_temperature.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "`#!/usr/bin/env node\n\n'use strict'`\n\n# Require the \"nixfilter\" module\nnixfilter = require('nixfilter')\n\n# Import/Require the \"simble\" module\nsimble = require('simble')\n\n# The UUID of the service\nservice_uuid = '3e135142-654f-9090-134a-a6ff5bb77046'\n\n# The default auto-disconnect time, in seconds\ndefault_auto_disconnect_time = 1\n\n# The default status update time, in seconds\ndefault_status_update_time = 0\n\n# Define the filter and register it on the module\nnixfilter.filter module,\n\n\t# The description, as shown when running with \"-h\"\n\tdescription: 'Control the target temperature of a eQ-3 eqiva radiator thermostat. Reads the target temperature to set as input lines from STDIN, outputs the actual current target temperature to STDOUT (all temperatures in degrees celsius).'\n\n\tadd_arguments: (argument_parser) ->\n\t\targument_parser.addArgument ['--address', '-a'],\n\t\t\thelp: 'The MAC address of the radiator thermostat. If omitted (not recommended), the first radiator thermostat found will be used'\n\t\targument_parser.addArgument ['--auto_disconnect_time', '-adt'],\n\t\t\ttype: 'float'\n\t\t\tdefaultValue: default_auto_disconnect_time\n\t\t\thelp: \"The auto-disconnect time, in seconds. A value of 0 will deactivate auto-disconnect (usually not recommended, drains battery) (default: #{default_auto_disconnect_time})\"\n\t\targument_parser.addArgument ['--status_update_time', '-sut', '-t'],\n\t\t\ttype: 'float'\n\t\t\tdefaultValue: default_status_update_time\n\t\t\thelp: \"The status update time, in seconds. A value of 0 will deactivate status updates (default: #{default_status_update_time})\"\n\t\treturn\n\n\tsetup: (args) ->\n\t\tsimble.discover_peripheral\n\t\t\taddress: args.address\n\t\t\tservice: service_uuid\n\t\t.then (@peripheral) =>\n\t\t\t@peripheral.set_auto_disconnect_time(args.auto_disconnect_time * 1000)\n\t\t\t@send_characteristic = @peripheral.get_discovered_characteristic(service_uuid, '3fa4585a-ce4a-3bad-db4b-b8df8179ea09')\n\t\t\t@receive_characteristic = @peripheral.get_discovered_characteristic(service_uuid, 'd0e8434d-cd29-0996-af41-6c90f4e0eb2a')\n\t\t\t@receive_characteristic.subscribe (data) =>\n\t\t\t\t@on_data_received(data)\n\t\t.then =>\n\t\t\t@request_status()\n\n\ton_data_received: (data) ->\n\t\tswitch data[0]\n\t\t\twhen 0x02 then @on_status_update(data)\n\t\treturn\n\n\ton_status_update: (status_data) ->\n\t\tclearTimeout(@status_update_timer)\n\t\t@on_target_temperature_update(status_data[5] / 2)\n\t\tif (@args.status_update_time > 0)\n\t\t\t@status_update_timer = setTimeout =>\n\t\t\t\t\t@request_status()\n\t\t\t\t, (@args.status_update_time * 1000)\n\t\treturn\n\n\ton_target_temperature_update: (target_temperature) ->\n\t\tif (target_temperature isnt @target_temperature)\n\t\t\t@target_temperature = target_temperature\n\t\t\t@output(target_temperature.toString())\n\t\treturn\n\n\trequest_status: ->\n\t\tdate = new Date()\n\t\t@send_characteristic.write([\n\t\t\t0x03\n\t\t\t(date.getFullYear() - 2000)\n\t\t\t(date.getMonth() + 1)\n\t\t\tdate.getDate()\n\t\t\tdate.getHours()\n\t\t\tdate.getMinutes()\n\t\t\tdate.getSeconds()\n\t\t])\n\n\tset_target_temperature: (target_temperature) ->\n\t\ttarget_temperature = Math.min(Math.max(target_temperature, 4.5), 30.0)\n\t\t@send_characteristic.write([0x41, Math.round(target_temperature * 2)])\n\n\ton_input: (target_temperature_string) ->\n\t\t@set_target_temperature(parseFloat(target_temperature_string))\n\n\tterminate: ->\n\t\t@peripheral.disconnect()\n"
  ]
}